#!/bin/bash

run_at_repo_top_level() {
    git_root=$(/usr/local/bin/git rev-parse --show-toplevel 2>/dev/null) && path="$git_root/"
    path="$path$1"

    if [ ! -f "$path" ]; then
        echo "Can't find: $path"
        return
    fi

    pip install -r "$path"
}

pipr() {
    run_at_repo_top_level "requirements.txt"
}

pipd() {
    run_at_repo_top_level "dev-requirements.txt"
}

man() {
    open dash://man:"$1"
}

take() {
    mkdir -p "$1"
    cd "$1" || exit
}

vc() {
    if git modified; then
        "$EDITOR" "$(git modified)";
    else
        echo "(nothing changed)"
    fi
}

va() {
    # search for pattern
    # open vim with all files containing said pattern
    # jump to location in file containing pattern
    pattern="$1"

    argv="."
    if [ $# -gt 1 ]; then  # use second+ args to limit search locations
        shift  # drop first cli arg
        argv="$*"
    fi

    ag_pattern=$(echo "$pattern" | sed -Ee 's/[<>]/\\\\b/g')
    vim_pattern=$(echo "$pattern" | sed -E -e 's,([/=]),\\\\\1,g' -e 's,.*,/\\\v&,')
    ag --files-with-matches --smart-case "$ag_pattern" -- "$argv" 2>/dev/null | xargs "$EDITOR" -c "$vim_pattern"
}

ipnt() {
    mktmpenv && pip install ipython[notebook] && ipython notebook
}

mkmc() {
    if [ -z "$1" ]; then
        echo "Please specify a directory." >&2
        return 1
    fi

    mkdir -p "$1/management/commands"
    touch "$1/management/__init__.py"
    touch "$1/management/commands/__init__.py"
}

d() {
    cd "$(find "$HOME/Documents" -type "d" | fzf)" || exit
}

p() {
    cd "$(find "$HOME/Projects" -maxdepth 1 -type "d" | fzf)" || exit
}

update-keybase-tracking() {
    # update gpg keys locally with what keybase knows about
    for u in $(keybase list-tracking); do
        keybase track "$u";
    done
}
